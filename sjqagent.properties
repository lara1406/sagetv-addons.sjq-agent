# This is the configuration for the task client; every option has a default
# value that will be used if you do not provide one.  Each option is 
# documented below and the default value is given in the commented assignment

# The port this task client will listen on.  The default value is fine
# unless you plan to install more than one task client on the same
# physical host.  If you plan to run more than one task client on the
# same host then you must ensure that each task client is configured to run
# on different ports.
#
# agent.port=23344

# The task client's run schedule.  This value determines when this task
# client is ENABLED.  Only an enabled task client will be assigned tasks by
# the SJQv4 server.  The default value keeps the task client active at all
# times.  You schedule the task client's enabled time as described in the link
# below.  For users familiar with crontab, you basically are providing the date
# and time fields of a crontab entry.  The task client is enabled if and only
# if the schedule pattern matches the time of day when the task assignment is
# attempted.  The link below provides details and examples.
#
# http://www.sauronsoftware.it/projects/cron4j/api/it/sauronsoftware/cron4j/SchedulingPattern.html
#
# Schedules determine when clients ACCEPT tasks.  An accepted task might run
# beyond its enabled time and if it does, the task will complete.
#
# agent.schedule=* * * * *

# The number of resources available for this task client PER SJQ SERVER THIS
# TASK CLIENT IS REGISTERED WITH.  Basically, if you only have one SJQ server
# then keep it at the default 100.  If you have more than one SJQ server then
# you can lower this value (usually to 100/n where n is the number of SJQ
# servers this task client will be registered on).  This value cannot be set
# above 100; doing so will reset it to 100.
#
# agent.resources=100

# The remainder of this config file defines the tasks that this task client is
# capable of executing.  All task definitions must start with the 'task.'
# prefix.  The second portion is the task id you're configuring (case
# INSENSITIVE).  The last portion is the task option name.  Only the 'exe'
# option is required, the rest are optional.

# The name of the exe to execute for this task.  Relative paths are relative
# to the base installation of the task client.  A file prefixed with the
# 'script:' identifier is treated as a script and will be executed in the
# task client's configured scripting environment.
#
# Backslashes must be escaped, but you can use forward slashes instead as in
# the example below.
#
# task.mytask.exe=C:/bin/myprog.exe

# Command line arguments to be included in the exe call.  Be careful to
# double quote args with spaces in them otherwise they will be seen as two
# separate arguments by the exe.
#
# task.mytask.args=

# The pretest to perform before executing the exe for this task.  This test
# allows you to do checks to determine if it's "safe" to run the exe at the
# time of task assignment.  "Safe" is subjective and can mean anything.  You
# may test for things like if there are clients connected to the SageTV server
# or if there's an active recording, etc.
#
# Pretests can be scripts only and are executed in the SJQ scripting 
# environment.  By default the task client ships with support for
# Groovy and if you're running a Sun/Oracle JDK 6 or better then you
# probably also have JavaScript support.  If looking for support with
# scripting on the user forums then the official support will be limited to
# Groovy scripts.  You can add support for other languages by simply adding
# JSR-223 provider jars to the engines folder of your task client installation.
# During development I experimented with Jython, Sleep (Perl like), and
# JavaScript all with mixed results.  By far, I found Groovy to be the
# easiest to use.  Of course, if you have experience with other languages then
# you're encouraged to use what you know.  I would stay away from Sleep only
# because it's not possible for SJQ to capture the output from Sleep due to
# limitations in its JSR-223 implementation.  Python worked fairly well in my
# testing as did JavaScript, but, as I said, I found Groovy to work the best.
#
# Your script must exit with a return code to denote what the task client
# should do with the assigned task:
#
# 	0: The test has passed successfully and the task client will run the
#      configured exe for this task
#
#   1: The test has failed and the task client will return the task back to
#      to the queue and put it in RETURNED state.  RETURNED tasks will be
#      reassigned to a task client, possibly the same one, the next time
#      the server processes the task queue.
#
#   2: The test has determined that this task does not need to run and will 
#      put the task in SKIPPED state.  A SKIPPED task is equivalent to a 
#      COMPLETED task.  The only difference is so you know that it was the
#      pretest script that decided the task was completed as opposed to the exe
#      actually running.  You might do this with a comskip task.  If you find
#      the edl file for the recording then you would just return a value of 2
#      and put the task in SKIPPED state so it doesn't rerun comskip.
#
#  >2: Same as returning 1
#
# NOTE: Be sure you do NOT call java.lang.System.exit() in any scripts that will
#       be executed within the SJQ scripting environment.  Calling System.exit()
#       will terminate the host JVM (i.e. the task client) and not just your
#       script!  In Groovy, you do a return statement to end your script; other
#       languages will have other ways to return the necessary value to the
#       caller.
#
# Paths that are relative are relative to the base install directory of the
# task client.  SJQ scripts only.  The script: prefix is optional, but will be
# accepted, if used.
#
#task.mytask.test=C:/scripts/mycheck.groovy

# Additional arguments to be passed to the test exe.  Again, be careful about
# double quoting arguments that have spaces in them.
#
# task.mytask.testargs=

# This client will only run this task on the given schedule.  The default
# value is to accept this task at all times (when the client itself is
# also enabled).
#
# See the agent.schedule comments above for details on the format of this
# value.
#
# task.mytask.schedule=* * * * *

# The total number of abstract resources required to run this task.  Task
# clients will run tasks in parallel as long as they have enough free resources
# available.
#
# task.mytask.resources=100

# The maximum number of instances of this task that can be run in parallel on
# this task client.  Only this many instances of this task will run at the
# same time, regardless of the amount of free resources available.
# task.mytask.maxprocs=1

# The maximum amount of seconds this task can run before timing out and marking
# the task as failed.
#
# task.mytask.maxtime=86400

# Not currently implemented
# task.mytask.maxtimeratio=1.0

# Configure the range of return codes that are acceptable for the configured
# exe.  Usually the defaults are fine and mean that if the exe does not return
# code zero then the exe failed; this is the universal standard.  However,
# some programs don't follow this standard.  comskip is a popular one that
# does not.  On success, comskip can return 0 or 1 so you'd want to configure
# the min value to be 0 and the max to be 1.  Return codes in the given range
# are considered successful, all others will mark the task as failed.
#
# task.mytask.rcmin=0
# task.mytask.rcmax=0

# A complete example, with no comments.
# Note the schedule values.  The agent schedule means the task only runs
# Mon-Sat, while the task schedule means the task will only be accepted between
# 1pm-5:59pm
#
# agent.port=23344
# agent.schedule=* * * * 1-6
# agent.resources=100
# task.mytask.exe=C:/bin/mytask.exe
# task.mytask.args=/f /g /t
# task.mytask.test=C:/scripts/mytask_precheck.groovy
# task.mytask.testargs=
# task.mytask.schedule=* 13-17 * * *
# task.mytask.resources=50
# task.mytask.maxprocs=2
# task.mytask.rcmin=0
# task.mytask.rcmax=0